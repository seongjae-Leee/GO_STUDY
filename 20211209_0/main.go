// ● 고루틴 : golang에서 관리하는 경량 스레드
// 고루틴에서 꼭 알고 넘어갈 것 : thread, process, 뮤텍스, 데드락
/*
프로그램 : 어떤 작업을 위해서 실행할 수 있는 파일
프로세스 : 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램. 할당받은 메모리에 올라와서 실행되고 있는 프로그램의 인스턴스
프로세스 안에는 code, data, stack, heap 등이 있다. 그 중 stack은 스레드별로 메모리를 따로 할당받고 나머지 셋은 공유한다.
스레드는 프로세스 안에서 실행되는 단위이다. 따라서 프로세스는 한개 이상의 스레드를 가지고 있다.
*/
// 스레드랑 프로세스의 차이점을 알아두면 좋다.

// go에서는 메인 루틴이라는 고루틴을 꼭 가지고 있다.
package main

import (
	"fmt"
	"sync"
	"time"
)

func PrintChar() {
	char := []rune{'대', '한', '민', '국', '코', '리', '아'}

	for _, v := range char {
		time.Sleep(300 * time.Millisecond)
		fmt.Printf("%c", v)
	}
}

func PrintNum() {
	for i := 1; i <= 5; i++ {
		time.Sleep(400 * time.Millisecond)
		fmt.Printf("%d", i)
	}
}

var wg sync.WaitGroup

func Sum(a, b int) {
	sum := 0
	for i := a; i <= b; i++ {
		sum += i
	}
	fmt.Printf("%d부터 %d까지의 합 %d.\n", a, b, sum)

	wg.Done() // 작업이 완료됨
}

func main() {

	// go func seongjae()  {
	// -> 이런 식으로 해당함수를 수행하는 새로운 고루틴 생성. 호출된 함수는 새로운 고루틴에서 수행된다.
	// }

	go PrintChar() // 새로운 고루틴
	go PrintNum()  // 별개의 고루틴

	time.Sleep(3 * time.Second) // 3초간 대기
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 시간이 얼마나 걸리는지 알려면 sync 패키지의 WaitGroup 사용
	// var wg sync.WaitGroup
	// wg.Add()  // 작업 개수를 설정해줌
	// wg.Done() // 작업이 완료될 때마다 호출
	// wg.Wait() // 모든 작업이 완료될 때까지 대기

	wg.Add(10) // 작업 개수 = 10개로 설정
	for i := 0; i < 10; i++ {
		go Sum(1, 1000000)
	}
	wg.Wait() // 모든 작업이 끝날 때까지 기다리자.
}

/*
결과값 :
대1한2민3국코4리5아
-> 이게 순서대로 딱딱 쓰임
1부터 1000000까지의 합 500000500000.
1부터 1000000까지의 합 500000500000.
1부터 1000000까지의 합 500000500000.
1부터 1000000까지의 합 500000500000.
1부터 1000000까지의 합 500000500000.
1부터 1000000까지의 합 500000500000.
1부터 1000000까지의 합 500000500000.
1부터 1000000까지의 합 500000500000.
1부터 1000000까지의 합 500000500000.
1부터 1000000까지의 합 500000500000.
*/
